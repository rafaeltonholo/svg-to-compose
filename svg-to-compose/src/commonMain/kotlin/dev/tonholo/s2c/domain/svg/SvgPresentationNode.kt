package dev.tonholo.s2c.domain.svg

import dev.tonholo.s2c.domain.delegate.attribute
import dev.tonholo.s2c.domain.xml.XmlChildNode
import dev.tonholo.s2c.domain.xml.XmlParentNode

// TODO: Consider removing.
abstract class SvgPresentationNode<T>(
    parent: XmlParentNode,
) : SvgChildNode<T>(parent), SvgNode
    where T : SvgNode, T : XmlChildNode {
    val alignmentBaseline: String? by attribute(name = "alignment-baseline")
    val baselineShift: String? by attribute(name = "baseline-shift")
    val clip: String? by attribute()
    val clipPath: String? by attribute(name = "clip-path")
    val clipRule: String? by attribute(name = "clip-rule")
    val color: String? by attribute()
    val colorInterpolation: String? by attribute(name = "color-interpolation")
    val colorInterpolationFilters: String? by attribute(name = "color-interpolation-filters")
    val colorProfile: String? by attribute(name = "color-profile")
    val colorRendering: String? by attribute(name = "color-rendering")
    val cursor: String? by attribute()
    val direction: String? by attribute()
    val display: String? by attribute()
    val dominantBaseline: String? by attribute(name = "dominant-baseline")
    val enableBackground: String? by attribute(name = "enable-background")
    val fill: String? by attribute()
    val fillOpacity: String? by attribute(name = "fill-opacity")
    val fillRule: String? by attribute(name = "fill-rule")
    val filter: String? by attribute()
    val floodColor: String? by attribute(name = "flood-color")
    val floodOpacity: String? by attribute(name = "flood-opacity")
    val fontFamily: String? by attribute(name = "font-family")
    val fontSize: String? by attribute(name = "font-size")
    val fontSizeAdjust: String? by attribute(name = "font-size-adjust")
    val fontStretch: String? by attribute(name = "font-stretch")
    val fontStyle: String? by attribute(name = "font-style")
    val fontVariant: String? by attribute(name = "font-variant")
    val fontWeight: String? by attribute(name = "font-weight")
    val glyphOrientationHorizontal: String? by attribute(name = "glyph-orientation-horizontal")
    val glyphOrientationVertical: String? by attribute(name = "glyph-orientation-vertical")
    val imageRendering: String? by attribute(name = "image-rendering")
    val kerning: String? by attribute()
    val letterSpacing: String? by attribute(name = "letter-spacing")
    val lightingColor: String? by attribute(name = "lighting-color")
    val markerEnd: String? by attribute(name = "marker-end")
    val markerMid: String? by attribute(name = "marker-mid")
    val markerStart: String? by attribute(name = "marker-start")
    val mask: String? by attribute()
    val opacity: String? by attribute()
    val overflow: String? by attribute()
    val pointerEvents: String? by attribute(name = "pointer-events")
    val shapeRendering: String? by attribute(name = "shape-rendering")
    val stopColor: String? by attribute(name = "stop-color")
    val stopOpacity: String? by attribute(name = "stop-opacity")
    val stroke: String? by attribute()
    val strokeDasharray: String? by attribute(name = "stroke-dasharray")
    val strokeDashoffset: String? by attribute(name = "stroke-dashoffset")
    val strokeLinecap: String? by attribute(name = "stroke-linecap")
    val strokeLinejoin: String? by attribute(name = "stroke-linejoin")
    val strokeMiterlimit: String? by attribute(name = "stroke-miterlimit")
    val strokeOpacity: String? by attribute(name = "stroke-opacity")
    val strokeWidth: String? by attribute(name = "stroke-width")
    val textAnchor: String? by attribute(name = "text-anchor")
    val textDecoration: String? by attribute(name = "text-decoration")
    val textRendering: String? by attribute(name = "text-rendering")
    val unicodeBidi: String? by attribute(name = "unicode-bidi")
    val visibility: String? by attribute()
    val wordSpacing: String? by attribute(name = "word-spacing")
    val writingMode: String? by attribute(name = "writing-mode")
}
